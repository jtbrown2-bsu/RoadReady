@model RoadReady.ViewModels.TourViewModel

@{
    ViewData["Title"] = "Tour";
}
<h1>Create Tour</h1>
<hr />
<div class="row">
    <div class="col-md-4">
        <form id="tourForm" asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Name" class="control-label"></label>
                <input id="tourName" asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div id="stops-container">
            </div>
            <button type="button" class="btn btn-secondary add-btn" id="add-stop-button" onclick="addStop()">Add Stop</button>
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a id="back-link" asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDvME3AVi6GUSS2-u5RfYJfSe49vZIXmgk&libraries=places&v=weekly"
            defer></script>
    <script defer>
        function addStopRow(stop) {
            let stopsContainerId = "stops-container";
            let stopsContainer = document.getElementById(stopsContainerId);
            let stopIndex = stopsContainer.childElementCount;

            let stopRow = document.createElement("div");
            stopRow.classList.add("stop-row");

            let stopFormGroup = document.createElement("div");
            stopFormGroup.classList.add("form-group", "stop-add");
            
            let stopLabel = document.createElement("label");
            stopLabel.innerHTML = "Stop:";
            
            let stopAutocomplete = document.createElement("input");
            stopAutocomplete.type = "text";
            stopAutocomplete.classList.add("form-control");

            var autocomplete = new google.maps.places.Autocomplete(stopAutocomplete);

            let nameInput = document.createElement("input");
            nameInput.type = "hidden";
            nameInput.className = "tourStopName";

            let latitudeInput = document.createElement("input");
            latitudeInput.type = "hidden";
            latitudeInput.className = "tourLatitude";

            let longitudeInput = document.createElement("input");
            longitudeInput.type = "hidden";
            longitudeInput.className = "tourLongitude";

            stopRow.appendChild(nameInput);
            stopRow.appendChild(latitudeInput);
            stopRow.appendChild(longitudeInput);

            autocomplete.addListener('place_changed', function () {
                var place = autocomplete.getPlace();
                nameInput.value = place.name;
                latitudeInput.value = place.geometry['location'].lat();
                longitudeInput.value = place.geometry['location'].lng();
            });

            stopFormGroup.appendChild(stopLabel);
            stopFormGroup.appendChild(stopAutocomplete);
            stopRow.appendChild(stopFormGroup);

            let orderInput = document.createElement("input");
            orderInput.type = "hidden";
            orderInput.className = "tourOrder";
            orderInput.value = stopIndex + 1;
            stopRow.appendChild(orderInput);

            let removeButton = document.createElement("button");
            removeButton.innerHTML = "&#215;";
            removeButton.classList.add("btn", "btn-primary", "remove-btn");
            removeButton.onclick = function(){removeStop(stopRow)};
            stopFormGroup.appendChild(removeButton);

            stopsContainer.appendChild(stopRow);

        }
        function removeStop(stop) {
            stop.remove();
        }
        function addStop() {
            addStopRow(null, "stops-container");
        }
        let tourForm = document.getElementById("tourForm");
        tourForm.onsubmit = function (event) {
            event.preventDefault();
            const formData = new FormData(event.target);
            let tourStopNames = document.getElementsByClassName("tourStopName");
            let tourLatitudes = document.getElementsByClassName("tourLatitude");
            let tourLongitudes = document.getElementsByClassName("tourLongitude");
            let stops = [];
            let tourName = document.getElementById("tourName").value;
            Array.prototype.forEach.call(tourStopNames, function (value, i) {
                stops.push(
                    {
                        Name: value.value,
                        Latitude: tourLatitudes[i].value,
                        Longitude: tourLongitudes[i].value,
                        Order: i
                    }
                )
            });
            let request = {
                Name: tourName,
                Stops: stops
            }
            fetch('/Tours/Create', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json; charset=utf-8'
                },
                body: JSON.stringify(request)
            }).then(function() {
                document.getElementById('back-link').click();
            });
        }
    </script>
}
